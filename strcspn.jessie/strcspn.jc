
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

axiomatic Strlen {

  predicate valid_str{L}(charP[..] s) =
  \at((\exists uint64 n_1;
        ((((s + (n_1 :> integer)).charM :> integer) == 0) &&
          \at((if (\at(0,L) <= \at(n_1,L)) then (((\offset_min(\at(s,L)) <=
                                                    \at(0,L)) &&
                                                   (\offset_max(\at(s,L)) >=
                                                     \at(n_1,L))) &&
                                                  (\forall integer __framac_tmp1;
                                                    (((\at(0,L) <=
                                                        __framac_tmp1) &&
                                                       (__framac_tmp1 <=
                                                         \at(n_1,L))) ==>
                                                      true))) else true),L))),L)
   
  lemma valid_str_shift1{L} :
  (_C_1 : (\forall charP[..] s_0;
            ((((s_0.charM :> integer) != 0) && valid_str{L}(s_0)) ==>
              valid_str{L}((s_0 + 1)))))
   
  logic uint64 strlen{L}(charP[..] s_1) =
  \at((if (((s_1 + 0).charM :> integer) == 0) then ((0 :> int32) :> uint64) else (
      ((((1 :> int32) :> uint64) :> integer) +
        (strlen{L}((s_1 + 1)) :> integer)) :> uint64)),L)
   
  lemma strlen_before_null{L} :
  (_C_2 : (\forall charP[..] s_2;
            (\forall integer i_1;
              (((valid_str{L}(s_2) && (0 <= i_1)) &&
                 (i_1 < (strlen{L}(s_2) :> integer))) ==>
                (((s_2 + i_1).charM :> integer) != 0)))))
   
  lemma strlen_at_null{L} :
  (_C_3 : (\forall charP[..] s_3;
            (valid_str{L}(s_3) ==>
              (((s_3 + (strlen{L}(s_3) :> integer)).charM :> integer) == 0))))
   
  lemma strlen_shift{L} :
  (_C_4 : (\forall charP[..] s_4;
            (\forall uint64 i_2;
              ((valid_str{L}(s_4) && (i_2 <= strlen{L}(s_4))) ==>
                ((strlen{L}((s_4 + (i_2 :> integer))) :> integer) ==
                  ((strlen{L}(s_4) :> integer) - (i_2 :> integer)))))))
   
  lemma strlen_shift_ex{L} :
  (_C_5 : (\forall charP[..] s_5;
            (\forall uint64 i_3;
              (((valid_str{L}(s_5) && (0 < (i_3 :> integer))) &&
                 (i_3 <= strlen{L}(s_5))) ==>
                (strlen{L}((s_5 + (i_3 :> integer))) < strlen{L}(s_5))))))
   
  lemma strlen_shift1{L} :
  (_C_6 : (\forall charP[..] s_6;
            ((valid_str{L}(s_6) && ((s_6.charM :> integer) != 0)) ==>
              ((strlen{L}(s_6) :> integer) ==
                (1 + (strlen{L}((s_6 + 1)) :> integer))))))
   
  lemma strlen_pointers{L} :
  (_C_7 : (\forall charP[..] s_7;
            (\forall charP[..] sc;
              (((((valid_str{L}(s_7) && valid_str{L}(sc)) &&
                   (\base_block(s_7) == \base_block(sc))) &&
                  ((s_7 - sc) <= 0)) &&
                 (\forall integer i_4;
                   (((0 <= i_4) && (i_4 <= (sc - s_7))) ==>
                     (((s_7 + i_4).charM :> integer) != 0)))) ==>
                (strlen{L}(sc) <= strlen{L}(s_7))))))
   
  lemma strlen_main{L} :
  (_C_8 : (\forall charP[..] s_8;
            (\forall uint64 n_2;
              (((valid_str{L}(s_8) &&
                  (((s_8 + (n_2 :> integer)).charM :> integer) == 0)) &&
                 (\forall uint64 i_5;
                   ((i_5 < n_2) ==>
                     (((s_8 + (i_5 :> integer)).charM :> integer) != 0)))) ==>
                (strlen{L}(s_8) == n_2)))))
  
}

axiomatic Strcspn {

  logic uint64 strcspn(charP[..] s_9, charP[..] reject)
   
  lemma strcspn_shift{L} :
  (_C_9 : (\forall charP[..] s_10;
            (\forall charP[..] reject_0;
              ((((valid_str{L}(s_10) && valid_str{L}(reject_0)) &&
                  ((s_10.charM :> integer) != 0)) &&
                 (\forall charP[..] r;
                   ((((reject_0 - r) <= 0) &&
                      ((r - (reject_0 + (strlen{L}(reject_0) :> integer))) <
                        0)) ==>
                     (r.charM != s_10.charM)))) ==>
                ((strcspn(s_10, reject_0) :> integer) ==
                  (1 + (strcspn((s_10 + 1), reject_0) :> integer)))))))
   
  lemma strcspn_shift_one_more{L} :
  (_C_10 : (\forall charP[..] s_11;
             (\forall charP[..] reject_1;
               (\forall charP[..] sc_0;
                 ((((((valid_str{L}(s_11) && valid_str{L}(reject_1)) &&
                       ((s_11.charM :> integer) != 0)) &&
                      ((s_11 - sc_0) <= 0)) &&
                     ((sc_0 - (s_11 + (strlen{L}(s_11) :> integer))) < 0)) &&
                    (\forall charP[..] r_0;
                      ((((reject_1 - r_0) <= 0) &&
                         ((r_0 -
                            (reject_1 + (strlen{L}(reject_1) :> integer))) <
                           0)) ==>
                        (r_0.charM != sc_0.charM)))) ==>
                   (strcspn(sc_0, reject_1) == strlen{L}(sc_0)))))))
   
  lemma strcspn_pointers{L} :
  (_C_11 : (\forall charP[..] s_12;
             (\forall charP[..] sc_1;
               (\forall charP[..] reject_2;
                 (((((valid_str{L}(s_12) && valid_str{L}(sc_1)) &&
                      (\base_block(s_12) == \base_block(sc_1))) &&
                     ((s_12 - sc_1) <= 0)) &&
                    ((sc_1 - (s_12 + (strlen{L}(s_12) :> integer))) < 0)) ==>
                   (strcspn(sc_1, reject_2) <= strcspn(s_12, reject_2)))))))
   
  lemma strcspn_all_chars{L} :
  (_C_12 : (\forall charP[..] s_13;
             (\forall charP[..] reject_3;
               (\forall integer i_6;
                 (((((valid_str{L}(s_13) && valid_str{L}(reject_3)) &&
                      (0 <= i_6)) &&
                     (i_6 < (strlen{L}(s_13) :> integer))) &&
                    (((s_13 + i_6).charM :> integer) != 0)) ==>
                   (strcspn(s_13, reject_3) == strlen{L}(s_13)))))))
   
  lemma strcspn_zero{L} :
  (_C_13 : (\forall charP[..] s_14;
             (\forall charP[..] reject_4;
               (((valid_str{L}(s_14) && valid_str{L}(reject_4)) &&
                  ((strlen{L}(s_14) :> integer) == 0)) ==>
                 ((strcspn(s_14, reject_4) :> integer) == 0)))))
   
  lemma strcspn_null{L} :
  (_C_14 : (\forall charP[..] s_15;
             (((strlen{L}(s_15) :> integer) == 0) ==>
               ((s_15.charM :> integer) == 0))))
  
}

uint64 strcspn(charP[..] s, charP[..] reject)
  requires ((_C_62 : valid_str{Here}(s)) &&
             (_C_63 : valid_str{Here}(reject)));
behavior default:
  assigns \nothing;
  ensures (_C_61 : (\result == strcspn(\at(s,Old), \at(reject,Old))));
{  
   (var charP[..] p);
   
   (var charP[..] r);
   
   (var uint64 count);
   
   (var uint64 __retres);
   
   {  (_C_15 : (count = (0 :> uint64)));
      (_C_16 : (p = s));
      
      loop 
      behavior default:
        invariant (_C_29 : (\base_block(s) == \base_block(p)));
      behavior default:
        invariant (_C_28 : valid_str{Here}(p));
      behavior default:
        invariant (_C_25 : ((_C_26 : (0 <= (count :> integer))) &&
                             (_C_27 : (count <= strlen{Here}(s)))));
      behavior default:
        invariant (_C_24 : ((count :> integer) == (p - s)));
      behavior default:
        invariant (_C_21 : ((_C_22 : ((s - p) <= 0)) &&
                             (_C_23 : ((p -
                                         (s + (strlen{Here}(s) :> integer))) <=
                                        0))));
      behavior default:
        invariant (_C_20 : ((strlen{Here}(s) :> integer) ==
                             ((strlen{Here}(p) :> integer) + (p - s))));
      behavior default:
        invariant (_C_19 : (\forall charP[..] z;
                             (\forall charP[..] t_0;
                               ((((((s - z) <= 0) && ((z - p) < 0)) &&
                                   ((reject - t_0) <= 0)) &&
                                  ((t_0 -
                                     (reject +
                                       (strlen{Here}(reject) :> integer))) <
                                    0)) ==>
                                 (z.charM != t_0.charM)))));
      behavior default:
        invariant (_C_18 : ((strcspn(s, reject) :> integer) ==
                             ((strcspn(p, reject) :> integer) +
                               (count :> integer))));
      behavior default:
        
        assigns count,
        p,
        r;
      variant (_C_17 : ((strlen{Here}(s) :> integer) - (p - s)));
      while (true)
      {  
         {  (if (_C_32 : ((_C_31 : ((_C_30 : p.charM) :> int32)) !=
                           (0 :> int32))) then () else 
            (goto while_0_break));
            
            {  (_C_33 : (r = reject));
               
               loop 
               behavior default:
                 invariant (_C_41 : (\base_block(reject) == \base_block(r)));
               behavior default:
                 invariant (_C_40 : valid_str{Here}(r));
               behavior default:
                 invariant (_C_37 : ((_C_38 : ((reject - r) <= 0)) &&
                                      (_C_39 : ((r -
                                                  (reject +
                                                    (strlen{Here}(reject) :> integer))) <=
                                                 0))));
               behavior default:
                 invariant (_C_36 : ((strlen{Here}(reject) :> integer) ==
                                      ((strlen{Here}(r) :> integer) +
                                        (r - reject))));
               behavior default:
                 invariant (_C_35 : (\forall charP[..] t;
                                      ((((reject - t) <= 0) && ((t - r) < 0)) ==>
                                        (p.charM != t.charM))));
               variant (_C_34 : ((strlen{Here}(reject) :> integer) -
                                  (r - reject)));
               while (true)
               {  
                  {  (if (_C_44 : ((_C_43 : ((_C_42 : r.charM) :> int32)) !=
                                    (0 :> int32))) then () else 
                     (goto while_1_break));
                     
                     {  (if (_C_51 : ((_C_50 : ((_C_49 : p.charM) :> int32)) ==
                                       (_C_48 : ((_C_47 : r.charM) :> int32)))) then 
                        {  
                           {  
                              (assert for default: (_C_45 : (jessie : 
                                                            (p.charM ==
                                                              r.charM))));
                              ()
                           };
                           
                           {  (_C_46 : (__retres = count));
                              
                              (goto return_label)
                           }
                        } else ())
                     };
                     (_C_53 : (r = (_C_52 : (r + (1 :> int32)))))
                  }
               };
               (while_1_break : ());
               (Before : ());
               (_C_56 : (count = (_C_55 : ((_C_54 : (count + (1 :> uint64))) :> uint64))));
               
               {  
                  (assert for default: (_C_57 : (jessie : (\at(((count :> integer) +
                                                                 1),Before) ==
                                                            (\at(count,Here) :> integer)))));
                  ()
               }
            };
            (_C_59 : (p = (_C_58 : (p + (1 :> int32)))))
         }
      };
      (while_0_break : ());
      (_C_60 : (__retres = count));
      (return_label : 
      (return __retres))
   }
}
